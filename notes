Preface
=======

Approaches to teaching
    "tinker until it works"
    "good programming"

Systematic program design
    Design recipes
        Complete programs
            GUI programs
            Batch programs
        Functions
            Atomic forms of data
            Enumerations of different kinds of data
            Data that compounds other data in a fixed manner
            Finite but arbitrarily large data
    Iterative refinement

Design process
    1. From problem analysis to data definitions
    2. Signature, purpose statement, header
    3. Functional examples
    4. Function template
    5. Function definition
    6. Testing

DrRacket and the teaching languages
    "Beginning Student Language" BSL
    "Intermediate Student Language" *SL

Skills that transfer
    Mathematics, especially (pre)algebra and geometry
    Analytical reading and writing skills


Prologue: How to Program
========================

DrRacket
    Definitions area
        Edit
        Save
    Interactions area
        Prompt

    Programs
        Expressions

    Inexact number
        #i

Arithmatic and arithmatic
    Nested arithmatic
    BSL arithmatic

    Number
        + - * /
        sqr expt sin cos
    String
        string-append
        string-length
        string->number
        number->string
    Boolean
        #true #false
        and or not
        > < =
        >= <=
        string=?
    Image

    Teachpacks
        2htdp/image
            image-width
            image-height
            circle
            rectangle
            square
            overlay
            place-image
            empty-scene

Inputs and output
    Function
        Definition
            (define (FunctionName InputName) BodyExpression)
        Application
            (FunctionName ArgumentExpression)

    2htdp/universe
        animate

Many ways to compute
    Conditional expression
        (cond
            [ConditionalExpression1 ResultExpression1]
            [ConditionalExpression2 ResultExpression2]
            ...
            [ConditionalExpressionN ResultExpressionN])

One program, many definitions
    Constant definitions
        (define Name Expression)
    Refactoring
    Line comments
    Magic numbers

You are a programmer now
    Programs are for other people to read.
    Programs reflects the problems statements and its important concepts.
    Programs comes with a concise self-description.
    Good programming is about solving problems systematically and conveying the system within the code.


Fixed-Size Data
===============

    Programming language
        Language of data
        Language of operations on data

1 Arithmatic

    It is critical for a programmer to know how the chosen language calculates.

    Atomic data of BSL
        Numbers
        Strings
        Images
        Boolean values

    Primitive operations or pre-defined operations

1.1 The Arithmatic of Numbers

    Prefix notation

    Numbers
        Natural numbers
        Integers
        Rational numbers
        Real numbers
        Complex numbers

    Precision of numbers
        Exact numbers
        Inexact numbers: #i prefix

1.2 The Arithmatic of Strings

    1String
    string-append

1.3 Mixing It Up

    string-length
    string-ith
    number->string
    substring

1.4 The Arithmatic of Images

    Primitive operations
        Creation
            line
            circle
            ellipse
            triangle
            rectangle
            text
        Properties
            image-width
            image-height
        Composition (need to understand anchor point)
            overlay
            overlay/xy
            overlay/align
            empty-scene
            place-image
            scene+line

1.5 The Arithmatic of Booleans

    Booleans
        #true
        #false

    Operations
        or
        and
        not

1.6 Mixing It Up with Booleans

    Conditionals
        if

    =
    <
    <=
    >
    >=

    string=?
    string<=?
    string>=?

1.7 Predicates: Know Thy Data

    Predicates

    number?
    string?
    image?
    boolean?

    integer?
    rational?
    real?
    complex?

    exact?
    inexact?

2 Functions and Programs

    Arithmatic
    Algebra
        Variable
        Function definition
        Function application
        Function composition

2.1 Functions

    Program
        Definitions
            Constant definitions
                (define Variable Expression)
            Function definitions
                (define (FunctionName Variable ... Variale)
                    Expression)
                Inputs (function header, arguments or parameters)
                    unary
                    binary
                    ternary
                Outputs (function body)

2.2 Computing

    Function application
        Determine the values of argument expressions.
        Check that the number of arguments and number of function
            parameters are the same.
        Computes the value of the body of the function, with all
            parameters replaced by the corresponding argument values.

2.3 Composing Functions

    Composition
        main definition or function
        auxiliary or helper functions

    Define one function per task.

2.4 Global Constants

    Global constant
        Global variable (name)
        Constant definition (right hand side)
            Literal constant
            Computed constant

    For every constant mentioned in a problem statement,
        introduce one constant definition.

2.5 Programs

    From a coding perspective
        Functions
            Main function composes other functions
        Constant definitions

    From the perspective of launching a program
        Batch program
            consumes all of its inputs and computes its results
        Interactive program (event driven)
            Iterate
                consumes some inputs (events and event handlers)
                compute
                produces some output

    Batch programs
        2htdp/batch-io
            read-file
            write-file
            'stdin
            'stdout

    Interactive programs
        2htdp/universe
            big-bang

            (big-bang cw0
              [on-tick tock]
              [on-key ke-h]
              [on-mouse me-h]
              [to-draw render]
              [stop-when end?]
              ...)

3 How to Design Programs

    Programming needs a language, a notation for communicating what we wish to compute.
    It is critical to learn how to get from a problem statement to a program.

3.1 Designing Functions

    Information and Data

        Domain
            Information (interprete data)
        Program
            Data (represent information)

        Data definitions
            It names a collection of data (a class) using a meaningful word.
            It informs readers how to create elements of this class and how to decide
                whether some arbitrary piece of data belongs to the collection.

    The Design Process

        Design an individual function

            1. Express how you wish to represent information as data.
            2. Write down a signature, a statement of purpose, and a function header.
                A function signature is a comment that tells the readers of your design
                    how many inputs your function consumes,
                    from which classes they are drawn,
                    and what kind of data it produces.
                A purpose statement is a comment that summarizes the purpose of the
                    function in a single line.
                A header is a simplistic function definition, also called a stub.
            3. Illustrate the signature and the purpose statement with some functional examples.
            4. The next step is to take inventory, to understand what are the givens
                and what we need to compute.
            5. It is now time to code.
            6. The last step of a proper design is to test the function on the examples
                that you worked out before. If the result doesn’t match the expected output,
                consider the following three possibilities:
                    a. You miscalculated and determined the wrong expected output for
                        some of the examples.
                    b. Alternatively, the function definition computes the wrong result.
                    c. Both the examples and the function definition are wrong.

3.2 Finger Exercises: Functions

3.3 Domain Knowledge

    Domain Knowledge
        Knowledge from external domains, such as mathematics, music, biology,
            civil engineering, art, and so on.
        Knowledge about the library functions in the chosen programming language.

    It is imperative that you have a solid understanding of the full possibilities
        of whatever computer languages are around and suitable.

3.4 From Functions to Programs

    It is always important to design every function systematically.
    We recommend keeping around a list of needed functions or a wish list.
        Each entry on a wish list should consist of three things:
            a meaningful name for the function,
            a signature, and
            a purpose statement.
        For the design of a batch program,
            put the main function on the wish list and start designing it.
        For the design of an interactive program, you can put
            the event handlers,
            the stop-when function, and
            the scene-rendering function on the list.
        As long as the list isn’t empty, pick a wish and design the function.
        If you discover during the design that you need another function,
            put it on the list.
        When the list is empty, you are done.

3.5 On Testing

    check-expect
    unit testing

3.6 Designing World Programs

    1. For all those properties of the world that remain the same over time and
        are needed to render it as an Image, introduce constants.

        a. “Physical” constants describe general attributes of objects in the
            world, such as the speed or velocity of an object, its color, its
            height, its width, its radius, and so forth.
        b. Graphical constants are images of objects in the world.

    2. Those properties that change over time—in reaction to clock ticks,
        keystrokes, or mouse actions—give rise to the current state of the
        world.

    3. Once you have a data representation for the state of the world, you need
        to design a number of functions so that you can form a valid big-bang
        expression.

    4. Finally, you need a main function.

3.7 Virtual Pet Worlds
